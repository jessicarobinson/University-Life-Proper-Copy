<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var_health=100;
var_sanity=100;
var_energy=100;
var_hunger=100; //set all the stats to 100 to start with
age=0; //this increments every step - when it reaches timespeed, an in-game minute passes

/*
I should change the timespeed variable into a constant at some point
obj_MainChar sets timespeed back to room_speed manually when waking up at the moment
which means that if timespeed gets changed further down the line, we'd have to change it
in two separate places - that snag could be avoided if timespeed were a constant instead.
*/

timespeed=room_speed; //room_speed; //1=fastest, 30=tick every second
minutes=0;
hours=0;
days=0;
minutesdisplay="00";
hoursdisplay="00";
weekday[0]="Monday";
weekday[1]="Tuesday";
weekday[2]="Wednesday";
weekday[3]="Thursday";
weekday[4]="Friday";
weekday[5]="Saturday";
weekday[6]="Sunday"; //all the above variables are of course for the time display
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>age++;
if(age=timespeed){ //if the appropriate amount of time has passed
    age=0;
    minutes++; //minutes increase by 1
    event_user(0); //do all the things that should be done every minute
}

//time display stuff
if(minutes==60){
    minutes=0;
    hours++;
}
if(hours==24){
    hours=0;
    days++;
}
if(days==7){
    days=0;
}
if(minutes&lt;10){
    minutesdisplay="0"+string(minutes);
}
else{
    minutesdisplay=string(minutes);
}
if(hours&lt;10){
    hoursdisplay="0"+string(hours);
}
else{
    hoursdisplay=string(hours);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this stuff gets done every in-game minute :)

switch(obj_MainChar.state){
    case 0: //active
            //as per brief, all stats besides health decrease by 1 for every 10 minutes of game time
            //this is carried out by decreasing stats by 0.1 every minute; it just seemed simpler. :)
        var_sanity-=0.1;
        var_energy-=0.1;
        var_hunger-=0.1;
        break;
    case 1: //sleeping - the brief claims that this raises "Sleep" by 20 an hour
            //I see no sleep stat yet! But the brief also mentions that sleeping raises health and energy :)
        if(var_health!=100){
            var_health+=0.1;
        }
        if(var_energy!=100){
            var_energy+=0.1;
        }
        var_sanity-=0.1; //wait, should sanity still decrease while sleeping? probably not.
        var_hunger-=0.1; //I guess hunger should continue to decrease though
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(0,0,"Health: "+string(var_health));
draw_text(0,16,"Sanity: "+string(var_sanity));
draw_text(0,32,"Energy: "+string(var_energy));
draw_text(0,48,"Hunger: "+string(var_hunger)); //display all the stats in top-left - will change these to bar displays later
if(obj_MainChar.state==1){ //this is for debug only
    draw_text(0,64,"SLEEPING");
}
if(abs(obj_MainChar.targetx-x)+abs(obj_MainChar.targety-y)&gt;2){ //if the distance from the target location is greater than 2
    draw_sprite(spr_Target,0,obj_MainChar.targetx,obj_MainChar.targety); //draw a little line to represent the target location
}
draw_text(492,0,weekday[days]+" "+hoursdisplay+":"+minutesdisplay); //in-game time display
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
